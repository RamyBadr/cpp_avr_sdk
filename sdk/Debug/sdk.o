# 1 ".././sdk.cpp"
# 1 "D:\\Embeded Course\\part2\\projects\\cpp\\sdk\\sdk\\Debug//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 ".././sdk.cpp"
# 10 ".././sdk.cpp"
# 1 ".././MCAL/avratmega32.h" 1
# 14 ".././MCAL/avratmega32.h"
# 1 ".././MCAL/../UTILS/basicmacros.h" 1
# 15 ".././MCAL/avratmega32.h" 2
# 1 ".././MCAL/../UTILS/datatypes.h" 1
# 12 ".././MCAL/../UTILS/datatypes.h"
typedef unsigned char U8;
typedef unsigned short int U16;
typedef unsigned long int U32;

typedef signed char S8;
typedef signed short int S16;
typedef signed long int S32;

typedef struct{
 U8 port_base;
 U8 pin_no;
}PinType;
# 16 ".././MCAL/avratmega32.h" 2
# 11 ".././sdk.cpp" 2
# 1 ".././MCAL/Register/Register.h" 1
# 14 ".././MCAL/Register/Register.h"
# 1 ".././MCAL/Register/../../UTILS/datatypes.h" 1
# 15 ".././MCAL/Register/Register.h" 2
# 1 ".././MCAL/Register/../../UTILS/basicmacros.h" 1
# 16 ".././MCAL/Register/Register.h" 2




namespace MCAL{


 class Register
 {
  private:
   U8 adress;
  public:
   Register(U8 address);
   void Write(U8 val);
   void Write(U8 bit_index, bool val);
   void Write(U8 startPin , U8 endPin, U8 val);

   void Read(U8 *val);
   void Read(U8 bit_index, U8 * val);
   void Read(U8 startPin , U8 endPin, U8 * val);

 };
}
# 12 ".././sdk.cpp" 2
using namespace MCAL;

int main(void)
{


 Register Port_D(0x32);
 *(volatile U8 *const)0x31 |= 0xFF;
 Port_D.Write(0xF0);
 Port_D.Write(6,0);
    while(1)
    {

    }
}
